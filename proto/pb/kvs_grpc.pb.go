// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: kvs.proto

package go_kvs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoKvs_Get_FullMethodName = "/kvs.GoKvs/Get"
	GoKvs_Set_FullMethodName = "/kvs.GoKvs/Set"
	GoKvs_Del_FullMethodName = "/kvs.GoKvs/Del"
)

// GoKvsClient is the client API for GoKvs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoKvsClient interface {
	Get(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*ValResponse, error)
	Set(ctx context.Context, in *KeyValRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	Del(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type goKvsClient struct {
	cc grpc.ClientConnInterface
}

func NewGoKvsClient(cc grpc.ClientConnInterface) GoKvsClient {
	return &goKvsClient{cc}
}

func (c *goKvsClient) Get(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*ValResponse, error) {
	out := new(ValResponse)
	err := c.cc.Invoke(ctx, GoKvs_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goKvsClient) Set(ctx context.Context, in *KeyValRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, GoKvs_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goKvsClient) Del(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, GoKvs_Del_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoKvsServer is the server API for GoKvs service.
// All implementations must embed UnimplementedGoKvsServer
// for forward compatibility
type GoKvsServer interface {
	Get(context.Context, *KeyRequest) (*ValResponse, error)
	Set(context.Context, *KeyValRequest) (*EmptyResponse, error)
	Del(context.Context, *KeyRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedGoKvsServer()
}

// UnimplementedGoKvsServer must be embedded to have forward compatible implementations.
type UnimplementedGoKvsServer struct {
}

func (UnimplementedGoKvsServer) Get(context.Context, *KeyRequest) (*ValResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGoKvsServer) Set(context.Context, *KeyValRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedGoKvsServer) Del(context.Context, *KeyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedGoKvsServer) mustEmbedUnimplementedGoKvsServer() {}

// UnsafeGoKvsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoKvsServer will
// result in compilation errors.
type UnsafeGoKvsServer interface {
	mustEmbedUnimplementedGoKvsServer()
}

func RegisterGoKvsServer(s grpc.ServiceRegistrar, srv GoKvsServer) {
	s.RegisterService(&GoKvs_ServiceDesc, srv)
}

func _GoKvs_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoKvsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoKvs_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoKvsServer).Get(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoKvs_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoKvsServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoKvs_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoKvsServer).Set(ctx, req.(*KeyValRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoKvs_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoKvsServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoKvs_Del_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoKvsServer).Del(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoKvs_ServiceDesc is the grpc.ServiceDesc for GoKvs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoKvs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kvs.GoKvs",
	HandlerType: (*GoKvsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GoKvs_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _GoKvs_Set_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _GoKvs_Del_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kvs.proto",
}
